#!/bin/python3

import math
import os
import random
import re
import sys

def unboundedKnapsack(k, arr):
    # Initialize dp array where dp[i] means the maximum sum we can get with sum not exceeding i
    dp = [0] * (k + 1)
    
    # Iterate over each possible sum from 0 to k
    for i in range(1, k + 1):
        for j in range(len(arr)):
            if arr[j] <= i:
                dp[i] = max(dp[i], dp[i - arr[j]] + arr[j])
    
    return dp[k]

import sys
input = sys.stdin.read
data = input().split()

index = 0
t = int(data[index])
index += 1

results = []
for _ in range(t):
    n = int(data[index])
    k = int(data[index + 1])
    index += 2
    arr = list(map(int, data[index:index + n]))
    index += n
    
    result = unboundedKnapsack(k, arr)
    results.append(result)

# Print results
for res in results:
    print(res)

    
     
